Metadata-Version: 2.4
Name: domain-checker
Version: 1.0.7
Summary: Asynchronous domain checker with WHOIS and RDAP support
Author-email: Domain Checker <domain@example.com>
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: python-whois>=0.7.3
Requires-Dist: rich>=13.0.0
Requires-Dist: click>=8.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: typer>=0.9.0
Requires-Dist: mcp>=1.0.0
Requires-Dist: asyncio-throttle>=1.0.0
Dynamic: license-file

# Domain Checker

An asynchronous domain checker with WHOIS and RDAP support, featuring a beautiful CLI interface and MCP server connectivity.

## Features

- **Asynchronous Processing**: Fast, non-blocking domain lookups
- **Triple Protocol Support**: WHOIS, RDAP, and DIG lookups
- **DNS Record Types**: Support for A, AAAA, MX, NS, SOA, TXT, and ANY records
- **DNS Propagation Checker**: Check DNS resolution across 20 regional ISP resolvers
- **Reverse DNS**: IP address to hostname lookups
- **Bulk Processing**: Check multiple domains with rate limiting
- **Beautiful CLI**: Rich, colorful terminal interface
- **MCP Server**: Connect via Model Context Protocol
- **Configurable**: Extensive configuration options
- **Error Handling**: Robust error handling and validation

## Installation

```bash
# Clone the repository
git clone <repository-url>
cd domain-checker

# Install dependencies
pip install -r requirements.txt

# Install the package
pip install -e .
```

## Quick Start

### CLI Usage

```bash
# Lookup a single domain
domch lookup example.com

# Lookup with specific method
domch lookup example.com --method rdap

# DIG lookup with specific record type
domch dig example.com --record A
domch dig example.com --record MX
domch dig example.com --record NS

# Reverse DNS lookup
domch reverse 8.8.8.8

# Check DNS propagation across regional ISPs
domch prop example.com --record A

# Bulk lookup with DIG
domch bulk example.com google.com --method dig --dig-record A

# Lookup from file
domch file domains.txt

# Compare WHOIS vs RDAP
domch compare example.com

# Interactive mode
domch interactive
```

### Python API

```python
import asyncio
from domain_checker import DomainChecker

async def main():
    checker = DomainChecker()
    
    # Single domain lookup
    result = await checker.lookup_domain("example.com")
    print(f"Domain: {result.domain}")
    print(f"Registrar: {result.data.registrar}")
    print(f"Expires: {result.data.expiration_date}")
    
    # Bulk lookup
    domains = ["example.com", "google.com", "github.com"]
    results = await checker.lookup_domains_bulk(domains)
    print(f"Successfully looked up {results.successful_lookups} domains")

asyncio.run(main())
```

### MCP Server

```bash
# Start MCP server
python -m domain_checker.mcp_server
```

## Configuration

Create a configuration file at `~/.config/domain-checker/config.json`:

```json
{
  "timeout": 30,
  "max_concurrent": 10,
  "rate_limit": 1.0,
  "default_method": "auto",
  "prefer_rdap": true,
  "show_raw_data": false,
  "enable_cache": false,
  "log_level": "INFO"
}
```

Or use environment variables:

```bash
export DOMAIN_CHECKER_TIMEOUT=30
export DOMAIN_CHECKER_MAX_CONCURRENT=10
export DOMAIN_CHECKER_RATE_LIMIT=1.0
export DOMAIN_CHECKER_DEFAULT_METHOD=auto
export DOMAIN_CHECKER_PREFER_RDAP=true
```

## CLI Commands

### `lookup`
Lookup a single domain with detailed information display.

```bash
domch lookup example.com [--method whois|rdap|dig|auto] [--timeout 30] [--raw] [--dig-record A|AAAA|MX|NS|SOA|TXT|ANY]
```

### `bulk`
Lookup multiple domains with progress tracking.

```bash
domch bulk domain1.com domain2.com [--method auto] [--concurrent 10] [--rate-limit 1.0] [--dig-record A|AAAA|MX|NS|SOA|TXT|ANY]
```

### `file`
Lookup domains from a text file (one domain per line).

```bash
domch file domains.txt [--method auto] [--concurrent 10] [--rate-limit 1.0] [--dig-record A|AAAA|MX|NS|SOA|TXT|ANY]
```

### `dig`
Perform DIG lookup for a domain with specific DNS record type.

```bash
domch dig example.com [--record A|AAAA|MX|NS|SOA|TXT|ANY] [--timeout 30]
```

### `reverse`
Perform reverse DNS lookup for an IP address.

```bash
domch reverse 8.8.8.8 [--timeout 30]
```

### `compare`
Compare WHOIS and RDAP results for a domain.

```bash
domch compare example.com [--timeout 30]
```

### `interactive`
Start interactive mode for repeated lookups.

```bash
domch interactive
```

## API Reference

### DomainChecker

Main class for domain lookups.

```python
checker = DomainChecker(
    timeout=30,           # Timeout in seconds
    max_concurrent=10,    # Max concurrent lookups
    rate_limit=1.0        # Rate limit (requests/second)
)
```

#### Methods

- `lookup_domain(domain, method="auto")` - Lookup single domain
- `lookup_domains_bulk(domains, method="auto")` - Bulk lookup
- `lookup_domains_from_file(file_path, method="auto")` - Lookup from file
- `compare_methods(domain)` - Compare WHOIS vs RDAP

### Models

#### DomainInfo
Contains domain information from WHOIS or RDAP.

```python
class DomainInfo:
    domain: str
    registrar: Optional[str]
    creation_date: Optional[datetime]
    expiration_date: Optional[datetime]
    updated_date: Optional[datetime]
    status: List[str]
    name_servers: List[str]
    registrant: Optional[Dict]
    admin_contact: Optional[Dict]
    tech_contact: Optional[Dict]
    source: str  # "whois" or "rdap"
```

#### LookupResult
Result of a domain lookup operation.

```python
class LookupResult:
    domain: str
    success: bool
    data: Optional[DomainInfo]
    error: Optional[str]
    lookup_time: float
    method: str
```

## MCP Server

The MCP server provides programmatic access to domain checking functionality.

### Available Tools

- `lookup_domain` - Lookup single domain
- `lookup_domains_bulk` - Bulk domain lookup
- `compare_methods` - Compare WHOIS vs RDAP
- `lookup_domains_from_file` - Lookup from file

### Example MCP Client

```python
import asyncio
from mcp.client import Client

async def main():
    client = Client("domain-checker")
    await client.connect()
    
    # Lookup a domain
    result = await client.call_tool("lookup_domain", {
        "domain": "example.com",
        "method": "auto"
    })
    
    print(result)

asyncio.run(main())
```

## Examples

### Basic Usage

```python
import asyncio
from domain_checker import DomainChecker

async def check_domain():
    checker = DomainChecker()
    result = await checker.lookup_domain("example.com")
    
    if result.success:
        print(f"Domain: {result.data.domain}")
        print(f"Registrar: {result.data.registrar}")
        print(f"Expires: {result.data.expiration_date}")
    else:
        print(f"Error: {result.error}")

asyncio.run(check_domain())
```

### Bulk Processing

```python
import asyncio
from domain_checker import DomainChecker

async def check_domains():
    checker = DomainChecker(max_concurrent=5, rate_limit=2.0)
    
    domains = [
        "example.com",
        "google.com", 
        "github.com",
        "stackoverflow.com",
        "reddit.com"
    ]
    
    results = await checker.lookup_domains_bulk(domains)
    
    print(f"Total: {results.total_domains}")
    print(f"Successful: {results.successful_lookups}")
    print(f"Failed: {results.failed_lookups}")
    print(f"Total time: {results.total_time:.2f}s")
    
    for result in results.results:
        if result.success:
            print(f"{result.domain}: {result.data.registrar}")
        else:
            print(f"{result.domain}: ERROR - {result.error}")

asyncio.run(check_domains())
```

### File Processing

```python
import asyncio
from domain_checker import DomainChecker

async def check_domains_from_file():
    checker = DomainChecker()
    
    # domains.txt contains one domain per line
    results = await checker.lookup_domains_from_file("domains.txt")
    
    # Save results to JSON
    import json
    with open("results.json", "w") as f:
        json.dump([r.dict() for r in results.results], f, indent=2, default=str)

asyncio.run(check_domains_from_file())
```

### Method Comparison

```python
import asyncio
from domain_checker import DomainChecker

async def compare_methods():
    checker = DomainChecker()
    comparison = await checker.compare_methods("example.com")
    
    print(f"Domain: {comparison['domain']}")
    print(f"WHOIS Success: {comparison['whois'].success}")
    print(f"RDAP Success: {comparison['rdap'].success}")
    print(f"WHOIS Time: {comparison['whois'].lookup_time:.2f}s")
    print(f"RDAP Time: {comparison['rdap'].lookup_time:.2f}s")

asyncio.run(compare_methods())
```

### DIG Lookups

```python
import asyncio
from domain_checker import DomainChecker

async def dig_examples():
    checker = DomainChecker()
    
    # A records
    result = await checker.dig_lookup("example.com", "A")
    print(f"A Records: {result.data.raw_data}")
    
    # MX records
    result = await checker.dig_lookup("gmail.com", "MX")
    print(f"MX Records: {result.data.raw_data}")
    
    # NS records
    result = await checker.dig_lookup("google.com", "NS")
    print(f"NS Records: {result.data.raw_data}")
    
    # Reverse DNS
    result = await checker.reverse_lookup("8.8.8.8")
    print(f"8.8.8.8 -> {result.data.domain}")

asyncio.run(dig_examples())
```

## Error Handling

The library provides comprehensive error handling:

```python
from domain_checker.exceptions import (
    DomainLookupError,
    WhoisError,
    RdapError,
    ValidationError,
    TimeoutError
)

try:
    result = await checker.lookup_domain("invalid-domain")
except ValidationError as e:
    print(f"Invalid domain: {e}")
except TimeoutError as e:
    print(f"Lookup timed out: {e}")
except DomainLookupError as e:
    print(f"Lookup failed: {e}")
```

## Performance Tips

1. **Use appropriate concurrency**: Set `max_concurrent` based on your system and network capacity
2. **Rate limiting**: Use `rate_limit` to avoid overwhelming servers
3. **Method selection**: RDAP is generally faster than WHOIS
4. **Caching**: Enable caching for repeated lookups
5. **Batch processing**: Use bulk operations for multiple domains

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## License

MIT License - see LICENSE file for details.

## Support

For issues and questions:
- Create an issue on GitHub
- Check the documentation
- Review the examples

## Changelog

### v1.0.0
- Initial release
- WHOIS and RDAP support
- CLI interface
- MCP server
- Bulk processing
- Configuration system
- Error handling
